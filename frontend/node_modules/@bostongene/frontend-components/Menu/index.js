"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var has_1 = __importDefault(require("lodash/has"));
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var isEqual_1 = __importDefault(require("lodash/isEqual"));
require("./Menu.scss");
var Codes;
(function (Codes) {
    Codes[Codes["BACKSPACE"] = 8] = "BACKSPACE";
    Codes[Codes["TAB"] = 9] = "TAB";
    Codes[Codes["ENTER"] = 13] = "ENTER";
    Codes[Codes["CAPS_LOCK"] = 20] = "CAPS_LOCK";
    Codes[Codes["ESC"] = 27] = "ESC";
    Codes[Codes["SPACE"] = 32] = "SPACE";
    Codes[Codes["PAGE_UP"] = 33] = "PAGE_UP";
    Codes[Codes["PAGE_DOWN"] = 34] = "PAGE_DOWN";
    Codes[Codes["END"] = 35] = "END";
    Codes[Codes["HOME"] = 36] = "HOME";
    Codes[Codes["LEFT"] = 37] = "LEFT";
    Codes[Codes["UP"] = 38] = "UP";
    Codes[Codes["RIGHT"] = 39] = "RIGHT";
    Codes[Codes["DOWN"] = 40] = "DOWN";
    Codes[Codes["INSERT"] = 45] = "INSERT";
    Codes[Codes["DELETE"] = 46] = "DELETE";
})(Codes || (Codes = {}));
var isKeyCodes = function (code, names) {
    return names.some(function (codeName) { return Codes[codeName] === code; });
};
var Menu = (function (_super) {
    __extends(Menu, _super);
    function Menu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.menu = react_1.default.createRef();
        _this.ignoreHover = false;
        _this.scrollCallback = null;
        _this.position = { x: 0, y: 0 };
        _this.lastMouseOverIndex = null;
        _this.timeout = null;
        _this.state = {
            hoveredIdx: 0,
            prevOptions: []
        };
        _this.tryFocusUnderMouse = function () {
            if (!_this.menu.current) {
                return;
            }
            var _a = _this.menu.current.getBoundingClientRect(), menuTop = _a.top, menuHeight = _a.height, menuLeft = _a.left, menuWidth = _a.width;
            var _b = _this.position, x = _b.x, y = _b.y;
            if (x < menuLeft || x > menuLeft + menuWidth || (y < menuTop && y > menuTop + menuHeight)) {
                return;
            }
            var index = Array.from(_this.menu.current.childNodes).findIndex(function (node, i) {
                var _a = node.getBoundingClientRect(), top = _a.top, height = _a.height, left = _a.left, width = _a.width;
                return (top <= y && top + height >= y && left <= x && left + width >= x && _this.isOptionEnabled(i));
            });
            if (index >= 0) {
                _this.menu.current.scrollTop = 0;
                _this.lastMouseOverIndex = index;
                _this.setState({ hoveredIdx: index });
            }
        };
        _this.onScroll = function () {
            if (_this.timeout) {
                clearTimeout(_this.timeout);
            }
            else if (_this.ignoreHover) {
                _this.ignoreHover = false;
            }
            _this.timeout = window.setTimeout(function () {
                _this.timeout = null;
                var hoveredIdx = _this.state.hoveredIdx;
                if (_this.scrollCallback) {
                    _this.scrollCallback();
                    _this.scrollCallback = null;
                }
                else if (_this.lastMouseOverIndex &&
                    _this.lastMouseOverIndex !== hoveredIdx &&
                    !_this.ignoreHover) {
                    _this.setState({ prevOptions: [], hoveredIdx: _this.lastMouseOverIndex });
                }
            }, 200);
        };
        _this.getOptionIndex = function (element) {
            return Array.from(element.parentElement.children).indexOf(element);
        };
        _this.onMouseMove = function (e) {
            if (_this.position.x === e.clientX && _this.position.y === e.clientY) {
                return;
            }
            _this.position = {
                x: e.clientX,
                y: e.clientY
            };
            if (_this.ignoreHover) {
                _this.ignoreHover = false;
                if (_this.menu.current && _this.menu.current.contains(e.target)) {
                    var hoveredIdx = _this.getOptionIndex(e.target);
                    if (!_this.isOptionEnabled(hoveredIdx)) {
                        return;
                    }
                    _this.setState({ hoveredIdx: hoveredIdx });
                }
            }
        };
        _this.onMouseOver = function (e) {
            if (isEqual_1.default(_this.menu.current, e.target)) {
                return;
            }
            var hoveredIdx = _this.state.hoveredIdx;
            var index = _this.getOptionIndex(e.target);
            if (!_this.isOptionEnabled(index)) {
                return;
            }
            _this.lastMouseOverIndex = index;
            if (_this.ignoreHover) {
                return;
            }
            if (hoveredIdx !== index) {
                _this.setState({ hoveredIdx: index });
            }
        };
        _this.changeHoveredItem = function (hoveredIndex) {
            if (_this.timeout) {
                return;
            }
            if (!_this.ignoreHover) {
                _this.ignoreHover = true;
            }
            _this.setState({ hoveredIdx: hoveredIndex }, function () {
                _this.scrollMenu(hoveredIndex);
            });
        };
        _this.onKeyDown = function (e) {
            if (!e.shiftKey && isKeyCodes(e.keyCode, ['UP', 'DOWN'])) {
                e.preventDefault();
                var hoveredIdx = _this.state.hoveredIdx;
                var dir = e.keyCode - 39;
                var options = _this.props.options;
                var hasDisabledFields = !isEmpty_1.default(options.filter(function (option) { return has_1.default(option, 'isDisabled'); }));
                var nextHoveredIdx = dir + hoveredIdx;
                if (!hasDisabledFields) {
                    if (nextHoveredIdx >= 0 && nextHoveredIdx <= options.length - 1) {
                        _this.changeHoveredItem(nextHoveredIdx);
                    }
                    return;
                }
                if (dir === 1) {
                    var restOptions_1 = options.slice(nextHoveredIdx, options.length);
                    var nextEnabledOptionIndex_1 = restOptions_1.findIndex(function (option) { return !has_1.default(option, 'isDisabled') || !option.isDisabled; });
                    if (nextEnabledOptionIndex_1 !== -1) {
                        _this.changeHoveredItem(nextHoveredIdx + nextEnabledOptionIndex_1);
                    }
                    return;
                }
                var restOptions = options.slice(0, nextHoveredIdx + 1);
                var nextEnabledOptionIndex = __spreadArrays(restOptions).reverse()
                    .findIndex(function (option) { return !has_1.default(option, 'isDisabled') || !option.isDisabled; });
                if (nextEnabledOptionIndex !== -1) {
                    _this.changeHoveredItem(nextHoveredIdx - nextEnabledOptionIndex);
                }
            }
        };
        _this.onKeyPress = function (e) {
            var _a = _this.props, options = _a.options, isUsedInSelect = _a.isUsedInSelect, onChange = _a.onChange;
            var hoveredIdx = _this.state.hoveredIdx;
            if (!e.shiftKey && isKeyCodes(e.keyCode, ['ENTER'])) {
                e.preventDefault();
                if (_this.isOptionEnabled(hoveredIdx) && !isEmpty_1.default(options[hoveredIdx])) {
                    onChange(options[hoveredIdx].value, hoveredIdx);
                }
                return;
            }
            if (isUsedInSelect) {
                var keyPressSymbol_1 = String.fromCharCode(e.which);
                var findOptionIndex = function (option) {
                    if (isEmpty_1.default(option.label))
                        return false;
                    if (has_1.default(option, 'isDisabled') && option.isDisabled)
                        return false;
                    return option.label[0].toLowerCase() === keyPressSymbol_1.toLowerCase();
                };
                var hoveredBeforeIdx = options.findIndex(findOptionIndex);
                var hoveredAfterIdx = __spreadArrays(options).splice(hoveredIdx + 1).findIndex(findOptionIndex);
                var hoveredIndex_1;
                if (hoveredAfterIdx !== -1) {
                    hoveredIndex_1 = hoveredAfterIdx + hoveredIdx + 1;
                }
                else {
                    hoveredIndex_1 = hoveredBeforeIdx !== -1 ? hoveredBeforeIdx : hoveredIdx;
                }
                _this.ignoreHover = true;
                if (_this.timeout) {
                    _this.scrollCallback = function () {
                        _this.scrollMenu(hoveredIndex_1);
                    };
                    _this.setState({ hoveredIdx: hoveredIndex_1 });
                    return;
                }
                _this.setState({ hoveredIdx: hoveredIndex_1 }, function () {
                    _this.scrollMenu(hoveredIndex_1);
                });
            }
        };
        _this.scrollMenu = function (nextHoveredIdx) {
            var options = _this.props.options;
            var menu = _this.menu;
            if (isEmpty_1.default(options)) {
                return;
            }
            if (!menu.current)
                return;
            var menuTop = menu.current.scrollTop;
            var menuHeight = menu.current.offsetHeight;
            var items = menu.current.querySelectorAll('.bg-menu__item');
            if (nextHoveredIdx >= items.length) {
                return;
            }
            var option = items[nextHoveredIdx];
            var optionTop = option.offsetTop - menu.current.offsetTop;
            var optionHeight = option.offsetHeight;
            if (menuHeight + menuTop < optionTop + optionHeight) {
                menu.current.scrollTop = optionTop + optionHeight - menuHeight;
                return;
            }
            if (menuTop > optionTop) {
                menu.current.scrollTop = optionTop;
            }
        };
        _this.isOptionEnabled = function (index) {
            var options = _this.props.options;
            return (index < options.length && (!has_1.default(options[index], 'isDisabled') || !options[index].isDisabled));
        };
        _this.onSelect = function (value, index) {
            var onChange = _this.props.onChange;
            if (_this.isOptionEnabled(index)) {
                onChange(value, index);
            }
        };
        _this.onMouseDown = function (e) {
            var index = _this.getOptionIndex(e.target);
            if (!_this.isOptionEnabled(index)) {
                e.preventDefault();
            }
        };
        return _this;
    }
    Menu.getDerivedStateFromProps = function (props, state) {
        if (!isEqual_1.default(props.options, state.prevOptions)) {
            return {
                prevOptions: props.options,
                hoveredIdx: isEmpty_1.default(state.prevOptions) && props.selectedIdx !== -1 ? props.selectedIdx : 0
            };
        }
        return null;
    };
    Menu.prototype.componentDidMount = function () {
        var hoveredIdx = this.state.hoveredIdx;
        document.addEventListener('keydown', this.onKeyDown);
        document.addEventListener('keypress', this.onKeyPress);
        document.addEventListener('mousemove', this.onMouseMove);
        this.scrollMenu(hoveredIdx);
    };
    Menu.prototype.componentDidUpdate = function (prevProps, prevState) {
        var hoveredIdx = this.state.hoveredIdx;
        var options = this.props.options;
        if (!isEqual_1.default(options, prevProps.options)) {
            if (this.timeout) {
                clearTimeout(this.timeout);
            }
            this.timeout = null;
            if (this.scrollCallback) {
                clearTimeout();
            }
            this.scrollCallback = null;
            this.lastMouseOverIndex = null;
            this.ignoreHover = false;
            this.tryFocusUnderMouse();
            this.scrollMenu(hoveredIdx);
            return;
        }
        if (hoveredIdx === prevState.hoveredIdx) {
            this.scrollMenu(hoveredIdx);
        }
    };
    Menu.prototype.componentWillUnmount = function () {
        document.removeEventListener('keydown', this.onKeyDown);
        document.removeEventListener('keypress', this.onKeyPress);
        document.removeEventListener('mousemove', this.onMouseMove);
    };
    Menu.prototype.render = function () {
        var _this = this;
        var _a = this.props, options = _a.options, selectedIdx = _a.selectedIdx, hasTitleAttribute = _a.hasTitleAttribute;
        var hoveredIdx = this.state.hoveredIdx;
        if (isEmpty_1.default(options))
            return null;
        var getTitleAttribute = function (option) { return hasTitleAttribute && { title: option.label }; };
        return (react_1.default.createElement("div", { className: "bg-menu", ref: this.menu, onWheel: this.onScroll, onMouseOver: this.onMouseOver, onMouseDown: this.onMouseDown }, options.map(function (option, index) {
            var optionClasses = classnames_1.default({
                'bg-menu__item': true,
                'bg-menu__item--hover': index === hoveredIdx && !option.isDisabled,
                'bg-menu__item--selected': index === selectedIdx && option.value !== '',
                'bg-menu__item--disabled': option.isDisabled === true
            });
            return (react_1.default.createElement("div", __assign({}, getTitleAttribute(option), { key: option.value, className: optionClasses, onMouseDown: function (event) { return event.preventDefault(); }, onClick: function () { return _this.onSelect(option.value, index); } }), option.label));
        })));
    };
    Menu.defaultProps = {
        selectedIdx: -1,
        isUsedInSelect: false,
        hasTitleAttribute: false
    };
    return Menu;
}(react_1.PureComponent));
exports.default = Menu;
