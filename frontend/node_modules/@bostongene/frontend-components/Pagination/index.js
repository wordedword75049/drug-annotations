"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var get_1 = __importDefault(require("lodash/get"));
var has_1 = __importDefault(require("lodash/has"));
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var isEqual_1 = __importDefault(require("lodash/isEqual"));
require("./Pagination.scss");
var Pagination = (function (_super) {
    __extends(Pagination, _super);
    function Pagination() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            page: _this.props.page,
            checkedPageSize: _this.props.checkedPageSize || _this.props.page.size,
            isFetching: false
        };
        _this.onPageChange = function (newPageParam) {
            var _a = _this.props, onSelect = _a.onSelect, isAsync = _a.isAsync;
            if (isAsync) {
                _this.setState({ isFetching: true });
                onSelect(newPageParam).then(function () { return _this.setState({ isFetching: false }); });
            }
            else {
                if (typeof newPageParam === 'number') {
                    _this.setState(function (prevState) { return (__assign(__assign({}, prevState), { page: __assign(__assign({}, prevState.page), { number: newPageParam }) })); });
                }
                onSelect(newPageParam);
            }
        };
        _this.onPageSizeChange = function (selectedPageSize) {
            var _a = _this.props, onPageSizeChange = _a.onPageSizeChange, isAsync = _a.isAsync;
            if (!isAsync) {
                var _b = _this.state, page = _b.page, totalElements = _b.page.totalElements;
                var newTotalPages = Math.round(totalElements / selectedPageSize) + 1;
                var newPage = __assign(__assign({}, page), { size: selectedPageSize, totalPages: newTotalPages, number: 0 });
                _this.setState({ page: newPage, checkedPageSize: selectedPageSize });
            }
            onPageSizeChange(selectedPageSize);
        };
        return _this;
    }
    Pagination.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, page = _a.page, checkedPageSize = _a.checkedPageSize;
        var oldPage = prevProps.page, oldCheckedSize = prevProps.checkedPageSize;
        if (!isEqual_1.default(page, oldPage)) {
            this.setState({ page: page });
        }
        if (checkedPageSize !== oldCheckedSize) {
            this.setState({ checkedPageSize: checkedPageSize });
        }
    };
    Pagination.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props, className = _b.className, pageSizes = _b.pageSizes, hideOnSinglePage = _b.hideOnSinglePage, isAsync = _b.isAsync;
        var _c = this.state, isFetching = _c.isFetching, page = _c.page, checkedPageSize = _c.checkedPageSize;
        if (isEmpty_1.default(page) || !has_1.default(page, 'totalElements') || !has_1.default(page, 'size'))
            return null;
        if (page.totalElements <= page.size && hideOnSinglePage)
            return null;
        var nextUrl = get_1.default(page, 'links.next.href');
        var prevUrl = get_1.default(page, 'links.prev.href');
        var pageSizeButtonClasses = function (pageSize) {
            return classnames_1.default({
                'bg-pagination__page-size-button': true,
                'bg-pagination__page-size-button--checked': checkedPageSize === pageSize
            });
        };
        var prevLinkClasses = classnames_1.default({
            'bg-pagination__link': true,
            'bg-pagination__link--prev': true,
            'bg-pagination__link--disabled': isFetching || page.number === 0
        });
        var nextLinkClasses = classnames_1.default({
            'bg-pagination__link': true,
            'bg-pagination__link--next': true,
            'bg-pagination__link--disabled': isFetching || page.totalPages - 1 === page.number
        });
        var paginationClasses = classnames_1.default((_a = {
                'bg-pagination': true
            },
            _a[className] = className,
            _a));
        var showedElements = {
            from: page.size * page.number + 1,
            to: (page.number + 1) * page.size >= page.totalElements
                ? page.totalElements
                : (page.number + 1) * page.size
        };
        var leftArrow = (react_1.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "7", height: "12", viewBox: "0 0 7 12", className: prevLinkClasses },
            react_1.default.createElement("g", { fill: "none", fillRule: "evenodd", transform: "translate(-11 -9)" },
                react_1.default.createElement("rect", { width: "30", height: "30", rx: "3" }),
                react_1.default.createElement("path", { d: "M11.293 15.297l4.593 4.593a.99.99 0 0 0 1.4-1.4l-3.9-3.9 3.9-3.9a.99.99 0 1 0-1.4-1.4l-4.593 4.593a1 1 0 0 0 0 1.414z" }))));
        var rightArrow = (react_1.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "7", height: "12", viewBox: "0 0 7 12", className: nextLinkClasses },
            react_1.default.createElement("g", { fill: "none", fillRule: "evenodd", transform: "translate(-12 -9)" },
                react_1.default.createElement("rect", { width: "30", height: "30", rx: "3" }),
                react_1.default.createElement("path", { d: "M18.283 15.297L13.69 19.89a.99.99 0 0 1-1.4-1.4l3.9-3.9-3.9-3.9a.99.99 0 0 1 1.4-1.4l4.593 4.593a1 1 0 0 1 0 1.414z" }))));
        return (react_1.default.createElement("div", { className: paginationClasses },
            pageSizes.length > 0 && (react_1.default.createElement("div", { className: "bg-pagination__page-size" },
                react_1.default.createElement("div", { className: "bg-pagination__page-size-text" }, "Show"),
                pageSizes
                    .filter(function (pageSize) { return pageSize <= page.totalElements; })
                    .map(function (pageSize) { return (react_1.default.createElement("div", { className: pageSizeButtonClasses(pageSize), onClick: function () { return _this.onPageSizeChange(pageSize); }, key: pageSize }, pageSize)); }))),
            react_1.default.createElement("div", { className: "bg-pagination__description" },
                showedElements.from,
                " - ",
                showedElements.to,
                " of ",
                page.totalElements),
            react_1.default.createElement("div", { className: "bg-pagination__links" },
                react_1.default.createElement("div", { className: prevLinkClasses, title: "back", onClick: function () {
                        _this.onPageChange(!isAsync ? page.number - 1 : prevUrl);
                    } }, leftArrow),
                react_1.default.createElement("div", { className: nextLinkClasses, title: "forth", onClick: function () {
                        _this.onPageChange(!isAsync ? page.number + 1 : nextUrl);
                    } }, rightArrow))));
    };
    Pagination.defaultProps = {
        className: '',
        pageSizes: [],
        checkedPageSize: 0,
        onPageSizeChange: function () { },
        hideOnSinglePage: true,
        isAsync: true
    };
    return Pagination;
}(react_1.PureComponent));
exports.default = Pagination;
