"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var isEmpty_1 = __importDefault(require("lodash/isEmpty"));
var isEqual_1 = __importDefault(require("lodash/isEqual"));
var Menu_1 = __importDefault(require("../Menu"));
require("./SearchDropDown.scss");
var SearchDropDown = (function (_super) {
    __extends(SearchDropDown, _super);
    function SearchDropDown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.input = react_1.default.createRef();
        _this.state = {
            inputValue: _this.props.selectedOption.label,
            selectedOption: _this.props.selectedOption,
            showDropdown: false
        };
        _this.onChange = function (_a) {
            var value = _a.value;
            var onSearch = _this.props.onSearch;
            _this.setState({ inputValue: value, showDropdown: true }, function () {
                onSearch(value);
            });
        };
        _this.onSelect = function (value, selectedIdx) {
            var _a = _this.props, options = _a.options, name = _a.name, onChange = _a.onChange, onSelect = _a.onSelect, isCleanedValues = _a.isCleanedValues;
            var option = options[selectedIdx];
            var searchFieldValues = isCleanedValues
                ? { inputValue: '', selectedOption: { label: '', value: '' } }
                : {
                    inputValue: option.label,
                    selectedOption: { label: option.label, value: option.value }
                };
            _this.setState(__assign(__assign({}, searchFieldValues), { showDropdown: false }), function () {
                onSelect(option);
                onChange({ name: name, value: option.value });
                document.activeElement.blur();
            });
        };
        _this.onFocus = function () { return _this.setState({ showDropdown: true }); };
        _this.onBlur = function (_a) {
            var currentTarget = _a.currentTarget;
            var _b = _this.props, name = _b.name, isCleanedValues = _b.isCleanedValues, onChange = _b.onChange, onSelect = _b.onSelect;
            var _c = _this.state, selectedOption = _c.selectedOption, inputValue = _c.inputValue;
            if (!currentTarget.contains(document.activeElement)) {
                var fieldValues = inputValue === ''
                    ? { inputValue: '', selectedOption: { label: '', value: '' } }
                    : { inputValue: selectedOption.label, selectedOption: selectedOption };
                _this.setState(__assign(__assign({}, fieldValues), { showDropdown: false }), function () {
                    if (isCleanedValues)
                        return;
                    onSelect(_this.state.selectedOption);
                    onChange({ name: name, value: _this.state.selectedOption.value });
                });
            }
        };
        return _this;
    }
    SearchDropDown.concatMetadata = function (options) {
        return options.map(function (_a) {
            var label = _a.label, value = _a.value, metadata = _a.metadata;
            return ({
                label: isEmpty_1.default(metadata) ? label : label + ": " + metadata,
                value: value
            });
        });
    };
    SearchDropDown.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, options = _a.options, selectedOption = _a.selectedOption;
        if (!isEqual_1.default(options, prevProps.options))
            this.forceUpdate();
        if (this.input.current.contains(document.activeElement))
            return;
        if (!isEqual_1.default(selectedOption, prevProps.selectedOption)) {
            this.setState({
                selectedOption: selectedOption,
                inputValue: selectedOption.label
            });
        }
    };
    SearchDropDown.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props, id = _b.id, name = _b.name, className = _b.className, options = _b.options, placeholder = _b.placeholder, maxResults = _b.maxResults, hasTitleAttribute = _b.hasTitleAttribute, disabled = _b.disabled;
        var _c = this.state, inputValue = _c.inputValue, showDropdown = _c.showDropdown;
        var componentClasses = classnames_1.default((_a = {
                'bg-search-drop-down': true,
                'bg-search-drop-down--active': showDropdown,
                'bg-search-drop-down--disabled': disabled
            },
            _a[className] = className,
            _a));
        return (react_1.default.createElement("div", { className: componentClasses, onBlur: this.onBlur },
            react_1.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "8", height: "5", viewBox: "0 0 8 5", className: "bg-search-drop-down__toggler" },
                react_1.default.createElement("g", { fill: "none", fillRule: "evenodd" },
                    react_1.default.createElement("path", { d: "M-8-10h24v24H-8z" }),
                    react_1.default.createElement("path", { className: "bg-search-drop-down__toggler-arrow", d: "M4.007 2.717l2.45-2.45a.913.913 0 1 1 1.29 1.29L4.691 4.615a.91.91 0 0 1-.684.266.91.91 0 0 1-.684-.266L.267 1.558a.913.913 0 0 1 1.29-1.29l2.45 2.449z" }))),
            react_1.default.createElement("input", { ref: this.input, id: id, name: name, value: inputValue, className: "bg-search-drop-down__input", autoComplete: "off", placeholder: placeholder, disabled: disabled, type: "text", onChange: function (_a) {
                    var target = _a.target;
                    return _this.onChange(target);
                }, onFocus: this.onFocus }),
            showDropdown && (react_1.default.createElement("div", { className: "bg-search-drop-down__dropdown" },
                react_1.default.createElement(Menu_1.default, { options: SearchDropDown.concatMetadata(options.slice(0, maxResults)), hasTitleAttribute: hasTitleAttribute, onChange: this.onSelect })))));
    };
    SearchDropDown.defaultProps = {
        className: '',
        placeholder: '',
        maxResults: 50,
        selectedOption: {
            label: '',
            value: ''
        },
        isCleanedValues: false,
        hasTitleAttribute: false,
        disabled: false,
        onChange: function () { },
        onSelect: function () { }
    };
    return SearchDropDown;
}(react_1.PureComponent));
exports.default = SearchDropDown;
