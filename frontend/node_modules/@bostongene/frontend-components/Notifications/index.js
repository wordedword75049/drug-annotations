"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_dom_1 = __importDefault(require("react-dom"));
var classnames_1 = __importDefault(require("classnames"));
var remove_1 = __importDefault(require("lodash/remove"));
require("./Notifications.scss");
var DEFAULT_TIMEOUT = 3000;
var useInterval = function (callback, delay, deps) {
    var func = react_1.useCallback(callback, __spreadArrays([callback], deps));
    react_1.useEffect(function () {
        var int = setInterval(func, delay);
        return function () { return clearInterval(int); };
    }, [func, delay]);
};
var useTimer = function (rerunConditions) {
    var _a = react_1.useState(0), time = _a[0], setTime = _a[1];
    react_1.useEffect(function () {
        setTime(0);
    }, [rerunConditions]);
    react_1.useEffect(function () {
        var timeout = setTimeout(function () { return setTime(time + 100); }, 100);
        return function () { return clearTimeout(timeout); };
    }, [time]);
    return time;
};
var Notifications = function (_a) {
    var notifications = _a.notifications, onRemoveNotification = _a.onRemoveNotification, onRemoveAllNotifications = _a.onRemoveAllNotifications;
    var notificationsRef = react_1.useRef(null);
    var _b = react_1.useState(false), allExpired = _b[0], setAllExpired = _b[1];
    var expiredIds = react_1.useRef([]);
    var freshIds = react_1.useRef(notifications.map(function (_a) {
        var id = _a.id;
        return id;
    }));
    var time = useTimer(notifications);
    var getNotificationsItemClasses = function (type) {
        return classnames_1.default('bg-notifications__item', "bg-notifications__item--" + type);
    };
    react_1.useEffect(function () {
        expiredIds.current = [];
        freshIds.current = notifications.map(function (_a) {
            var id = _a.id;
            return id;
        });
    }, [notifications]);
    useInterval(function () {
        var expiredNotification = notifications.find(function (_a) {
            var id = _a.id, _b = _a.timeout, timeout = _b === void 0 ? DEFAULT_TIMEOUT : _b;
            return time >= timeout && freshIds.current.includes(id);
        });
        if (expiredNotification) {
            expiredIds.current.push(expiredNotification.id);
            remove_1.default(freshIds.current, function (id) { return id === expiredNotification.id; });
            onRemoveNotification(expiredNotification.id);
        }
        if (expiredIds.current.length === notifications.length) {
            setAllExpired(true);
            onRemoveAllNotifications();
        }
    }, 100, [time, allExpired]);
    return !allExpired
        ? react_dom_1.default.createPortal(react_1.default.createElement("div", { className: "bg-notifications", ref: notificationsRef }, notifications.map(function (notification) {
            var _a;
            return (react_1.default.createElement("div", { key: notification.id }, !expiredIds.current.includes(notification.id) ? (react_1.default.createElement("div", { className: getNotificationsItemClasses((_a = notification.type, (_a !== null && _a !== void 0 ? _a : 'default'))) }, notification.text)) : null));
        })), document.body)
        : null;
};
Notifications.defaultProps = {
    onRemoveNotification: function () { }
};
exports.default = Notifications;
